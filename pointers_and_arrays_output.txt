--------------------------------
Start Of Program
--------------------------------

The following statements describe the data capacities of various primitive C++ data types:

sizeof(int) = 4 byte(s). // integer (i.e. whole number) values

sizeof(unsigned long long int) = 8 byte(s). // integer values from a larger set that what int encompasses

sizeof(bool) = 1 byte(s). // Boolean values (true : not(0) :: false : 0)

sizeof(char) = 1 byte(s). // string character value such as 'A' or '?' or '7'

sizeof(float) = 4 byte(s). // floating-point number value such as 3.14

sizeof(double) = 8 byte(s). // floating-point number values from a larger set than what float encompasses

sizeof(long double) = 16 byte(s). // floating-point number values from a larger set than what double encompasses

sizeof(int *) = 8 byte(s). // A pointer-to-int type variable stores the memory address of the first memory cell of 4 contiguous memory cells which are allocated to an int type variable (and each memory cell has a data capacity of 1 byte).

sizeof(unsigned long long int *) = 8 byte(s). // A pointer-to-unsigned-long-long-int type variable stores the memory address of the first memory cell of 8 contiguous memory cells which are allocated to an unsigned long long int type variable (and each memory cell has a data capacity of 1 byte)..

sizeof(bool *) = 8 byte(s). // A pointer-to-bool type variable stores the memory address of a bool type variable.

sizeof(char *) = 8 byte(s). // A pointer-to-char type variable stores the memory address of a char type variable.

sizeof(float *) = 8 byte(s). // A pointer-to-float type variable stores the memory address of the first memory cell of 4 contiguous memory cells which are allocated to a float type variable (and each memory cell has a data capacity of 1 byte).

sizeof(double *) = 8 byte(s). // A pointer-to-double type variable stores the memory address of the first memory cell of 8 contiguous memory cells which are allocated to a double type variable (and each memory cell has a data capacity of 1 byte).

sizeof(long double *) = 8 byte(s). // A pointer-to-long-double type variable stores the memory address of the first memory cell of 16 contiguous memory cells which are allocated to a long double type variable (and each memory cell has a data capacity of 1 byte).

sizeof(int **) = 8 byte(s). // A pointer-to-pointer-to-int type variable stores the memory address of the first memory cell of 8 contiguous memory cells which are allocated to a pointer-to-int type variable (and each memory cell has a data capacity of 1 byte).

sizeof(bool **) = 8 byte(s). // A pointer-to-pointer-to-bool type variable stores the memory address of the first memory cell of 8 contiguous memory cells which are allocated to a pointer-to-bool type variable (and each memory cell has a data capacity of 1 byte).

sizeof(double **) = 8 byte(s). // A pointer-to-pointer-to-double type variable stores the memory address of the first memory cell of 8 contiguous memory cells which are allocated to a pointer-to-double type variable (and each memory cell has a data capacity of 1 byte).

sizeof(int ***) = 8 byte(s). // A pointer-to-pointer-to-pointer-to-int type variable stores the memory address of the first memory cell of 8 contiguous memory cells which are allocated to a pointer-to-pointer-to-int type variable (and each memory cell has a data capacity of 1 byte).

sizeof(bool ***) = 8 byte(s). // A pointer-to-pointer-to-pointer-to-bool type variable stores the memory address of the first memory cell of 8 contiguous memory cells which are allocated to a pointer-to-pointer-to-bool type variable (and each memory cell has a data capacity of 1 byte).

sizeof(double ***) = 8 byte(s). // A pointer-to-pointer-to-pointer-to-double type variable stores the memory address of the first memory cell of 8 contiguous memory cells which are allocated to a pointer-to-pointer-to-double type variable (and each memory cell has a data capacity of 1 byte).

--------------------------------

STEP_0: CREATE A DYNAMIC ARRAY WHICH IS NAMED A AND WHICH IS COMPRISED OF S INT TYPE VALUES.

--------------------------------

The value which was entered for S is 30.

S := 30. // number of consecutive int-sized chunks of memory to allocate to an array such that the memory address of the first element of that array, A[0], is stored in a pointer-to-int type variable named A

--------------------------------

// Declare a pointer-to-int type variable named A.
int * A;

// Allocate S contiguous int-sized chunks of memory and store the memory address of the first int-sized chunk of memory, A[0], inside the pointer-to-int type variable named A.
A = new int [S];

--------------------------------

A = 0x5616d625f8c0. // memory address of A[0]

A[0] = 0. 		// &A[0] = 0x5616d625f8c0. (memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[0]).
A[1] = 0. 		// &A[1] = 0x5616d625f8c4. (memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[1]).
A[2] = 0. 		// &A[2] = 0x5616d625f8c8. (memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[2]).
A[3] = 0. 		// &A[3] = 0x5616d625f8cc. (memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[3]).
A[4] = 0. 		// &A[4] = 0x5616d625f8d0. (memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[4]).
A[5] = 0. 		// &A[5] = 0x5616d625f8d4. (memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[5]).
A[6] = 0. 		// &A[6] = 0x5616d625f8d8. (memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[6]).
A[7] = 0. 		// &A[7] = 0x5616d625f8dc. (memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[7]).
A[8] = 0. 		// &A[8] = 0x5616d625f8e0. (memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[8]).
A[9] = 0. 		// &A[9] = 0x5616d625f8e4. (memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[9]).
A[10] = 0. 		// &A[10] = 0x5616d625f8e8. (memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[10]).
A[11] = 0. 		// &A[11] = 0x5616d625f8ec. (memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[11]).
A[12] = 0. 		// &A[12] = 0x5616d625f8f0. (memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[12]).
A[13] = 0. 		// &A[13] = 0x5616d625f8f4. (memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[13]).
A[14] = 0. 		// &A[14] = 0x5616d625f8f8. (memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[14]).
A[15] = 0. 		// &A[15] = 0x5616d625f8fc. (memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[15]).
A[16] = 0. 		// &A[16] = 0x5616d625f900. (memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[16]).
A[17] = 0. 		// &A[17] = 0x5616d625f904. (memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[17]).
A[18] = 0. 		// &A[18] = 0x5616d625f908. (memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[18]).
A[19] = 0. 		// &A[19] = 0x5616d625f90c. (memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[19]).
A[20] = 0. 		// &A[20] = 0x5616d625f910. (memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[20]).
A[21] = 0. 		// &A[21] = 0x5616d625f914. (memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[21]).
A[22] = 0. 		// &A[22] = 0x5616d625f918. (memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[22]).
A[23] = 0. 		// &A[23] = 0x5616d625f91c. (memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[23]).
A[24] = 0. 		// &A[24] = 0x5616d625f920. (memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[24]).
A[25] = 0. 		// &A[25] = 0x5616d625f924. (memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[25]).
A[26] = 0. 		// &A[26] = 0x5616d625f928. (memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[26]).
A[27] = 0. 		// &A[27] = 0x5616d625f92c. (memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[27]).
A[28] = 0. 		// &A[28] = 0x5616d625f930. (memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[28]).
A[29] = 0. 		// &A[29] = 0x5616d625f934. (memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[29]).

--------------------------------

STEP_1: RANDOMLY ASSIGN ONE OF THE FIRST T RANDOM NONNEGATIVE INTEGERS TO EACH ELEMENT OF THE ARRAY NAMED A.

--------------------------------

The value which was entered for T is 7.

T := 7. // number of unique states which each element of the array pointed to by A can store exactly one of at a time

--------------------------------

// Seed the pseudo random number generator with the integer number of seconds which have elapsed since the Unix Epoch (i.e. midnight of 01_JANUARY_1970).
srand(time(NULL));

// For each element, A[i], of the array named A, set A[i] to a randomly generated integer which is no smaller than 0 and no larger than (T - 1).
for (i = 0; i < S; i += 1) A[i] = rand() % T;

--------------------------------

A = 0x5616d625f8c0. // memory address of A[0]

A[0] = 3. 		// &A[0] = 0x5616d625f8c0. (memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[0]).
A[1] = 5. 		// &A[1] = 0x5616d625f8c4. (memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[1]).
A[2] = 6. 		// &A[2] = 0x5616d625f8c8. (memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[2]).
A[3] = 1. 		// &A[3] = 0x5616d625f8cc. (memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[3]).
A[4] = 0. 		// &A[4] = 0x5616d625f8d0. (memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[4]).
A[5] = 6. 		// &A[5] = 0x5616d625f8d4. (memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[5]).
A[6] = 2. 		// &A[6] = 0x5616d625f8d8. (memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[6]).
A[7] = 4. 		// &A[7] = 0x5616d625f8dc. (memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[7]).
A[8] = 6. 		// &A[8] = 0x5616d625f8e0. (memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[8]).
A[9] = 2. 		// &A[9] = 0x5616d625f8e4. (memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[9]).
A[10] = 1. 		// &A[10] = 0x5616d625f8e8. (memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[10]).
A[11] = 1. 		// &A[11] = 0x5616d625f8ec. (memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[11]).
A[12] = 5. 		// &A[12] = 0x5616d625f8f0. (memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[12]).
A[13] = 1. 		// &A[13] = 0x5616d625f8f4. (memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[13]).
A[14] = 0. 		// &A[14] = 0x5616d625f8f8. (memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[14]).
A[15] = 6. 		// &A[15] = 0x5616d625f8fc. (memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[15]).
A[16] = 4. 		// &A[16] = 0x5616d625f900. (memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[16]).
A[17] = 6. 		// &A[17] = 0x5616d625f904. (memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[17]).
A[18] = 2. 		// &A[18] = 0x5616d625f908. (memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[18]).
A[19] = 4. 		// &A[19] = 0x5616d625f90c. (memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[19]).
A[20] = 5. 		// &A[20] = 0x5616d625f910. (memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[20]).
A[21] = 3. 		// &A[21] = 0x5616d625f914. (memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[21]).
A[22] = 6. 		// &A[22] = 0x5616d625f918. (memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[22]).
A[23] = 6. 		// &A[23] = 0x5616d625f91c. (memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[23]).
A[24] = 0. 		// &A[24] = 0x5616d625f920. (memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[24]).
A[25] = 4. 		// &A[25] = 0x5616d625f924. (memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[25]).
A[26] = 1. 		// &A[26] = 0x5616d625f928. (memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[26]).
A[27] = 1. 		// &A[27] = 0x5616d625f92c. (memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[27]).
A[28] = 5. 		// &A[28] = 0x5616d625f930. (memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[28]).
A[29] = 4. 		// &A[29] = 0x5616d625f934. (memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[29]).

--------------------------------

STEP_2: SORT THE ELEMENT VALUES OF THE ARRAY NAMED A TO BE IN ASCENDING ORDER.

--------------------------------

// Sort the integer values stored in array A to be in ascending order using the Bubble Sort algorithm.
bubble_sort(A, S);

--------------------------------

A = 0x5616d625f8c0. // memory address of A[0]

A[0] = 0.		// &A[0] = 0x5616d625f8c0. (memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[0]).
A[1] = 0.		// &A[1] = 0x5616d625f8c4. (memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[1]).
A[2] = 0.		// &A[2] = 0x5616d625f8c8. (memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[2]).
A[3] = 1.		// &A[3] = 0x5616d625f8cc. (memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[3]).
A[4] = 1.		// &A[4] = 0x5616d625f8d0. (memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[4]).
A[5] = 1.		// &A[5] = 0x5616d625f8d4. (memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[5]).
A[6] = 1.		// &A[6] = 0x5616d625f8d8. (memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[6]).
A[7] = 1.		// &A[7] = 0x5616d625f8dc. (memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[7]).
A[8] = 1.		// &A[8] = 0x5616d625f8e0. (memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[8]).
A[9] = 2.		// &A[9] = 0x5616d625f8e4. (memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[9]).
A[10] = 2.		// &A[10] = 0x5616d625f8e8. (memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[10]).
A[11] = 2.		// &A[11] = 0x5616d625f8ec. (memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[11]).
A[12] = 3.		// &A[12] = 0x5616d625f8f0. (memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[12]).
A[13] = 3.		// &A[13] = 0x5616d625f8f4. (memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[13]).
A[14] = 4.		// &A[14] = 0x5616d625f8f8. (memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[14]).
A[15] = 4.		// &A[15] = 0x5616d625f8fc. (memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[15]).
A[16] = 4.		// &A[16] = 0x5616d625f900. (memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[16]).
A[17] = 4.		// &A[17] = 0x5616d625f904. (memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[17]).
A[18] = 4.		// &A[18] = 0x5616d625f908. (memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[18]).
A[19] = 5.		// &A[19] = 0x5616d625f90c. (memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[19]).
A[20] = 5.		// &A[20] = 0x5616d625f910. (memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[20]).
A[21] = 5.		// &A[21] = 0x5616d625f914. (memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[21]).
A[22] = 5.		// &A[22] = 0x5616d625f918. (memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[22]).
A[23] = 6.		// &A[23] = 0x5616d625f91c. (memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[23]).
A[24] = 6.		// &A[24] = 0x5616d625f920. (memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[24]).
A[25] = 6.		// &A[25] = 0x5616d625f924. (memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[25]).
A[26] = 6.		// &A[26] = 0x5616d625f928. (memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[26]).
A[27] = 6.		// &A[27] = 0x5616d625f92c. (memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[27]).
A[28] = 6.		// &A[28] = 0x5616d625f930. (memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[28]).
A[29] = 6.		// &A[29] = 0x5616d625f934. (memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[29]).

--------------------------------

STEP_3: CREATE A DYNAMIC ARRAY WHICH IS NAMED B AND WHICH IS COMPRISED OF T INT TYPE VALUES.

--------------------------------

// Declare a pointer-to-int type variable named B.
int * B;

// Allocate T contiguous int-sized chunks of memory and store the memory address of the first int-sized chunk of memory, B[0], inside the pointer-to-int type variable named B.
B = new int [T];

--------------------------------

B = 0x5616d625f940. // memory address of B[0]

B[0] = 0.		// &B[0] = 0x5616d625f940. (memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to B[0]).
B[1] = 0.		// &B[1] = 0x5616d625f944. (memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to B[1]).
B[2] = 0.		// &B[2] = 0x5616d625f948. (memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to B[2]).
B[3] = 0.		// &B[3] = 0x5616d625f94c. (memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to B[3]).
B[4] = 0.		// &B[4] = 0x5616d625f950. (memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to B[4]).
B[5] = 0.		// &B[5] = 0x5616d625f954. (memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to B[5]).
B[6] = 0.		// &B[6] = 0x5616d625f958. (memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to B[6]).

--------------------------------

STEP_4: FOR EACH ELEMENT B[i] OF THE ARRAY NAMED B, STORE THE NUMBER OF TIMES i APPEARS AS AN ELEMENT VALUE IN THE ARRAY NAMED A.

--------------------------------

B = 0x5616d625f940. // memory address of B[0]

B[0] = 3.		// &B[0] = 0x5616d625f940. (memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to B[0]).
B[1] = 6.		// &B[1] = 0x5616d625f944. (memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to B[1]).
B[2] = 3.		// &B[2] = 0x5616d625f948. (memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to B[2]).
B[3] = 2.		// &B[3] = 0x5616d625f94c. (memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to B[3]).
B[4] = 5.		// &B[4] = 0x5616d625f950. (memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to B[4]).
B[5] = 4.		// &B[5] = 0x5616d625f954. (memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to B[5]).
B[6] = 7.		// &B[6] = 0x5616d625f958. (memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to B[6]).

--------------------------------

STEP_5: CREATE A DYNAMIC ARRAY WHICH IS NAMED C AND WHICH IS COMPRISED OF T POINTER-TO-CHAR TYPE VALUES.

--------------------------------

// Declare one pointer-to-pointer-to-char type variable.
char ** C;

// Allocate T contiguous pointer-to-char-sized chunks of memory and store the memory address of the first pointer-to-char-sized chunk of memory, C[0], inside the pointer-to-pointer-to-char type variable named C.
C = new char * [T];

// C is a two-dimensional array which depicts a histogram (i.e. bar graph) such the length of the ith row is identical to the value stored in B[i].
for (i = 0; i < T; i += 1)
{
    C[i] = new char [B[i]];
    for (k = 0; k < B[i]; k += 1) C[i][k] = 'X';
}

--------------------------------

C = 0x5616d625f970. // memory address of C[0]

C[0] = XXX.		// &C[0] = 0x5616d625f970. (memory address of the first memory cell comprising the block of 8 contiguous memory cells allocated to C[0]).
C[1] = XXXXXX.		// &C[1] = 0x5616d625f978. (memory address of the first memory cell comprising the block of 8 contiguous memory cells allocated to C[1]).
C[2] = XXX.		// &C[2] = 0x5616d625f980. (memory address of the first memory cell comprising the block of 8 contiguous memory cells allocated to C[2]).
C[3] = XX.		// &C[3] = 0x5616d625f988. (memory address of the first memory cell comprising the block of 8 contiguous memory cells allocated to C[3]).
C[4] = XXXXX.		// &C[4] = 0x5616d625f990. (memory address of the first memory cell comprising the block of 8 contiguous memory cells allocated to C[4]).
C[5] = XXXX.		// &C[5] = 0x5616d625f998. (memory address of the first memory cell comprising the block of 8 contiguous memory cells allocated to C[5]).
C[6] = XXXXXXX.		// &C[6] = 0x5616d625f9a0. (memory address of the first memory cell comprising the block of 8 contiguous memory cells allocated to C[6]).

--------------------------------

STEP_6: RELEASE MEMORY WHICH WAS ALLOCATED TO THE DYNAMIC ARRAYS NAMED A, B, AND C.

--------------------------------

// De-allocate memory which was assigned to the dynamically-allocated array of S int type values.
delete [] A; // Free up S contiguous int-sized chunks of memory which were assigned to the dynamic array named A.

De-allocate memory which was assigned to the dynamically-allocated array of T int type values.
delete [] B; // Free up T contiguous int-sized chunks of memory which were assigned to the dynamic array named B.

// De-allocate memory which was assigned to the dynamically-allocated array of T pointer-to-char type values.
for (i = 0; i < T; i += 1) delete [] C[i]; // Free up B[i] char-sized chunks of memory which were assigned to the dynamic array named C[i].
delete [] C; // Free up T contiguous pointer-to-char-sized chunks of memory which were assigned to the dynamic array named C.

--------------------------------
End Of Program
--------------------------------