--------------------------------
Start Of Program
--------------------------------

The following statements describe the data capacities of various primitive C++ data types:

sizeof(int) = 4 byte(s). // integer (i.e. whole number) values

sizeof(unsigned long long int) = 8 byte(s). // integer values from a larger set that what int encompasses

sizeof(bool) = 1 byte(s). // Boolean values (true : not(0) :: false : 0)

sizeof(char) = 1 byte(s). // string character value such as 'A' or '?' or '7'

sizeof(float) = 4 byte(s). // floating-point number value such as 3.14

sizeof(double) = 8 byte(s). // floating-point number values from a larger set than what float encompasses

sizeof(long double) = 16 byte(s). // floating-point number values from a larger set than what double encompasses

sizeof(int *) = 8 byte(s). // A pointer-to-int type variable stores the memory address of the first memory cell of 4 contiguous memory cells which are allocated to an int type variable (and each memory cell has a data capacity of 1 byte).

sizeof(unsigned long long int *) = 8 byte(s). // A pointer-to-unsigned-long-long-int type variable stores the memory address of the first memory cell of 8 contiguous memory cells which are allocated to an unsigned long long int type variable (and each memory cell has a data capacity of 1 byte)..

sizeof(bool *) = 8 byte(s). // A pointer-to-bool type variable stores the memory address of a bool type variable.

sizeof(char *) = 8 byte(s). // A pointer-to-char type variable stores the memory address of a char type variable.

sizeof(float *) = 8 byte(s). // A pointer-to-float type variable stores the memory address of the first memory cell of 4 contiguous memory cells which are allocated to a float type variable (and each memory cell has a data capacity of 1 byte).

sizeof(double *) = 8 byte(s). // A pointer-to-double type variable stores the memory address of the first memory cell of 8 contiguous memory cells which are allocated to a double type variable (and each memory cell has a data capacity of 1 byte).

sizeof(long double *) = 8 byte(s). // A pointer-to-long-double type variable stores the memory address of the first memory cell of 16 contiguous memory cells which are allocated to a long double type variable (and each memory cell has a data capacity of 1 byte).

sizeof(int **) = 8 byte(s). // A pointer-to-pointer-to-int type variable stores the memory address of the first memory cell of 8 contiguous memory cells which are allocated to a pointer-to-int type variable (and each memory cell has a data capacity of 1 byte).

sizeof(bool **) = 8 byte(s). // A pointer-to-pointer-to-bool type variable stores the memory address of the first memory cell of 8 contiguous memory cells which are allocated to a pointer-to-bool type variable (and each memory cell has a data capacity of 1 byte).

sizeof(double **) = 8 byte(s). // A pointer-to-pointer-to-double type variable stores the memory address of the first memory cell of 8 contiguous memory cells which are allocated to a pointer-to-double type variable (and each memory cell has a data capacity of 1 byte).

sizeof(int ***) = 8 byte(s). // A pointer-to-pointer-to-pointer-to-int type variable stores the memory address of the first memory cell of 8 contiguous memory cells which are allocated to a pointer-to-pointer-to-int type variable (and each memory cell has a data capacity of 1 byte).

sizeof(bool ***) = 8 byte(s). // A pointer-to-pointer-to-pointer-to-bool type variable stores the memory address of the first memory cell of 8 contiguous memory cells which are allocated to a pointer-to-pointer-to-bool type variable (and each memory cell has a data capacity of 1 byte).

sizeof(double ***) = 8 byte(s). // A pointer-to-pointer-to-pointer-to-double type variable stores the memory address of the first memory cell of 8 contiguous memory cells which are allocated to a pointer-to-pointer-to-double type variable (and each memory cell has a data capacity of 1 byte).

--------------------------------

STEP_0: CREATE A DYNAMIC ARRAY WHICH IS NAMED A AND WHICH IS COMPRISED OF S INT TYPE VALUES.

--------------------------------

The value which was entered for S is 30.

S := 30. // number of consecutive int-sized chunks of memory to allocate to an array such that the memory address of the first element of that array, A[0], is stored in a pointer-to-int type variable named A

--------------------------------

// Declare a pointer-to-int type variable named A.
int * A;

// Allocate S contiguous int-sized chunks of memory and store the memory address of the first int-sized chunk of memory, A[0], inside the pointer-to-int type variable named A.
A = new int [S];

--------------------------------

A = 0x55be9fc458c0. // memory address of A[0]

A[0] = 0. 	// &A[0] = 	0x55be9fc458c0. 	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[0]).
A[1] = 0. 	// &A[1] = 	0x55be9fc458c4. 	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[1]).
A[2] = 0. 	// &A[2] = 	0x55be9fc458c8. 	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[2]).
A[3] = 0. 	// &A[3] = 	0x55be9fc458cc. 	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[3]).
A[4] = 0. 	// &A[4] = 	0x55be9fc458d0. 	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[4]).
A[5] = 0. 	// &A[5] = 	0x55be9fc458d4. 	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[5]).
A[6] = 0. 	// &A[6] = 	0x55be9fc458d8. 	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[6]).
A[7] = 0. 	// &A[7] = 	0x55be9fc458dc. 	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[7]).
A[8] = 0. 	// &A[8] = 	0x55be9fc458e0. 	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[8]).
A[9] = 0. 	// &A[9] = 	0x55be9fc458e4. 	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[9]).
A[10] = 0. 	// &A[10] = 	0x55be9fc458e8. 	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[10]).
A[11] = 0. 	// &A[11] = 	0x55be9fc458ec. 	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[11]).
A[12] = 0. 	// &A[12] = 	0x55be9fc458f0. 	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[12]).
A[13] = 0. 	// &A[13] = 	0x55be9fc458f4. 	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[13]).
A[14] = 0. 	// &A[14] = 	0x55be9fc458f8. 	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[14]).
A[15] = 0. 	// &A[15] = 	0x55be9fc458fc. 	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[15]).
A[16] = 0. 	// &A[16] = 	0x55be9fc45900. 	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[16]).
A[17] = 0. 	// &A[17] = 	0x55be9fc45904. 	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[17]).
A[18] = 0. 	// &A[18] = 	0x55be9fc45908. 	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[18]).
A[19] = 0. 	// &A[19] = 	0x55be9fc4590c. 	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[19]).
A[20] = 0. 	// &A[20] = 	0x55be9fc45910. 	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[20]).
A[21] = 0. 	// &A[21] = 	0x55be9fc45914. 	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[21]).
A[22] = 0. 	// &A[22] = 	0x55be9fc45918. 	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[22]).
A[23] = 0. 	// &A[23] = 	0x55be9fc4591c. 	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[23]).
A[24] = 0. 	// &A[24] = 	0x55be9fc45920. 	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[24]).
A[25] = 0. 	// &A[25] = 	0x55be9fc45924. 	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[25]).
A[26] = 0. 	// &A[26] = 	0x55be9fc45928. 	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[26]).
A[27] = 0. 	// &A[27] = 	0x55be9fc4592c. 	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[27]).
A[28] = 0. 	// &A[28] = 	0x55be9fc45930. 	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[28]).
A[29] = 0. 	// &A[29] = 	0x55be9fc45934. 	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[29]).

--------------------------------

STEP_1: CREATE A DYNAMIC ARRAY WHICH IS NAMED A AND WHICH IS COMRPISED OF S INT TYPE VALUES.

--------------------------------

The value which was entered for T is 7.

T := 7. // number of unique states which each element of the array pointed to by A can store exactly one of at a time

--------------------------------

// Seed the pseudo random number generator with the integer number of seconds which have elapsed since the Unix Epoch (i.e. midnight of 01_JANUARY_1970).
srand(time(NULL));

// For each element, A[i], of the array named A, set A[i] to a randomly generated integer which is no smaller than 0 and no larger than (T - 1).
for (i = 0; i < S; i += 1) A[i] = rand() % T;

--------------------------------

A = 0x55be9fc458c0. // memory address of A[0]

A[0] = 1. 	// &A[0] = 	0x55be9fc458c0. 	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[0]).
A[1] = 2. 	// &A[1] = 	0x55be9fc458c4. 	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[1]).
A[2] = 0. 	// &A[2] = 	0x55be9fc458c8. 	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[2]).
A[3] = 1. 	// &A[3] = 	0x55be9fc458cc. 	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[3]).
A[4] = 6. 	// &A[4] = 	0x55be9fc458d0. 	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[4]).
A[5] = 3. 	// &A[5] = 	0x55be9fc458d4. 	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[5]).
A[6] = 5. 	// &A[6] = 	0x55be9fc458d8. 	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[6]).
A[7] = 6. 	// &A[7] = 	0x55be9fc458dc. 	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[7]).
A[8] = 3. 	// &A[8] = 	0x55be9fc458e0. 	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[8]).
A[9] = 2. 	// &A[9] = 	0x55be9fc458e4. 	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[9]).
A[10] = 3. 	// &A[10] = 	0x55be9fc458e8. 	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[10]).
A[11] = 1. 	// &A[11] = 	0x55be9fc458ec. 	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[11]).
A[12] = 1. 	// &A[12] = 	0x55be9fc458f0. 	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[12]).
A[13] = 0. 	// &A[13] = 	0x55be9fc458f4. 	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[13]).
A[14] = 4. 	// &A[14] = 	0x55be9fc458f8. 	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[14]).
A[15] = 1. 	// &A[15] = 	0x55be9fc458fc. 	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[15]).
A[16] = 5. 	// &A[16] = 	0x55be9fc45900. 	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[16]).
A[17] = 0. 	// &A[17] = 	0x55be9fc45904. 	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[17]).
A[18] = 2. 	// &A[18] = 	0x55be9fc45908. 	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[18]).
A[19] = 3. 	// &A[19] = 	0x55be9fc4590c. 	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[19]).
A[20] = 6. 	// &A[20] = 	0x55be9fc45910. 	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[20]).
A[21] = 0. 	// &A[21] = 	0x55be9fc45914. 	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[21]).
A[22] = 1. 	// &A[22] = 	0x55be9fc45918. 	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[22]).
A[23] = 3. 	// &A[23] = 	0x55be9fc4591c. 	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[23]).
A[24] = 3. 	// &A[24] = 	0x55be9fc45920. 	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[24]).
A[25] = 0. 	// &A[25] = 	0x55be9fc45924. 	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[25]).
A[26] = 5. 	// &A[26] = 	0x55be9fc45928. 	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[26]).
A[27] = 5. 	// &A[27] = 	0x55be9fc4592c. 	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[27]).
A[28] = 0. 	// &A[28] = 	0x55be9fc45930. 	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[28]).
A[29] = 5. 	// &A[29] = 	0x55be9fc45934. 	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[29]).

--------------------------------

STEP_2: SORT THE ELEMENT VALUES OF THE ARRAY NAMED A TO BE IN ASCENDING ORDER.

--------------------------------

// Sort the integer values stored in array A to be in ascending order using the Bubble Sort algorithm.
bubble_sort(A, S);

--------------------------------

A = 0x55be9fc458c0. // memory address of A[0]

A[0] = 0.	// &A[0] =	0x55be9fc458c0.	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[0]).
A[1] = 0.	// &A[1] =	0x55be9fc458c4.	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[1]).
A[2] = 0.	// &A[2] =	0x55be9fc458c8.	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[2]).
A[3] = 0.	// &A[3] =	0x55be9fc458cc.	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[3]).
A[4] = 0.	// &A[4] =	0x55be9fc458d0.	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[4]).
A[5] = 0.	// &A[5] =	0x55be9fc458d4.	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[5]).
A[6] = 1.	// &A[6] =	0x55be9fc458d8.	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[6]).
A[7] = 1.	// &A[7] =	0x55be9fc458dc.	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[7]).
A[8] = 1.	// &A[8] =	0x55be9fc458e0.	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[8]).
A[9] = 1.	// &A[9] =	0x55be9fc458e4.	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[9]).
A[10] = 1.	// &A[10] =	0x55be9fc458e8.	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[10]).
A[11] = 1.	// &A[11] =	0x55be9fc458ec.	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[11]).
A[12] = 2.	// &A[12] =	0x55be9fc458f0.	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[12]).
A[13] = 2.	// &A[13] =	0x55be9fc458f4.	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[13]).
A[14] = 2.	// &A[14] =	0x55be9fc458f8.	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[14]).
A[15] = 3.	// &A[15] =	0x55be9fc458fc.	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[15]).
A[16] = 3.	// &A[16] =	0x55be9fc45900.	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[16]).
A[17] = 3.	// &A[17] =	0x55be9fc45904.	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[17]).
A[18] = 3.	// &A[18] =	0x55be9fc45908.	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[18]).
A[19] = 3.	// &A[19] =	0x55be9fc4590c.	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[19]).
A[20] = 3.	// &A[20] =	0x55be9fc45910.	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[20]).
A[21] = 4.	// &A[21] =	0x55be9fc45914.	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[21]).
A[22] = 5.	// &A[22] =	0x55be9fc45918.	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[22]).
A[23] = 5.	// &A[23] =	0x55be9fc4591c.	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[23]).
A[24] = 5.	// &A[24] =	0x55be9fc45920.	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[24]).
A[25] = 5.	// &A[25] =	0x55be9fc45924.	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[25]).
A[26] = 5.	// &A[26] =	0x55be9fc45928.	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[26]).
A[27] = 6.	// &A[27] =	0x55be9fc4592c.	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[27]).
A[28] = 6.	// &A[28] =	0x55be9fc45930.	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[28]).
A[29] = 6.	// &A[29] =	0x55be9fc45934.	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[29]).

--------------------------------

STEP_3: CREATE A DYNAMIC ARRAY WHICH IS NAMED B AND WHICH IS COMPRISED OF T INT TYPE VALUES.

--------------------------------

// Declare a pointer-to-int type variable named B.
int * B;

// Allocate T contiguous int-sized chunks of memory and store the memory address of the first int-sized chunk of memory, B[0], inside the pointer-to-int type variable named B.
B = new int [T];

--------------------------------

B = 0x55be9fc45940. // memory address of B[0]

B[0] = 0.	// &B[0] =	0x55be9fc45940.	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to B[0]).
B[1] = 0.	// &B[1] =	0x55be9fc45944.	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to B[1]).
B[2] = 0.	// &B[2] =	0x55be9fc45948.	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to B[2]).
B[3] = 0.	// &B[3] =	0x55be9fc4594c.	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to B[3]).
B[4] = 0.	// &B[4] =	0x55be9fc45950.	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to B[4]).
B[5] = 0.	// &B[5] =	0x55be9fc45954.	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to B[5]).
B[6] = 0.	// &B[6] =	0x55be9fc45958.	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to B[6]).

--------------------------------

STEP_4: FOR EACH ELEMENT B[i] OF THE ARRAY NAMED B, STORE THE NUMBER OF TIMES i APPEARS AS AN ELEMENT VALUE IN THE ARRAY NAMED A.

--------------------------------

B = 0x55be9fc45940. // memory address of B[0]

B[0] = 6.	// &B[0] =	0x55be9fc45940.	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to B[0]).
B[1] = 6.	// &B[1] =	0x55be9fc45944.	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to B[1]).
B[2] = 3.	// &B[2] =	0x55be9fc45948.	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to B[2]).
B[3] = 6.	// &B[3] =	0x55be9fc4594c.	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to B[3]).
B[4] = 1.	// &B[4] =	0x55be9fc45950.	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to B[4]).
B[5] = 5.	// &B[5] =	0x55be9fc45954.	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to B[5]).
B[6] = 3.	// &B[6] =	0x55be9fc45958.	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to B[6]).

--------------------------------

STEP_5: CREATE A DYNAMIC ARRAY WHICH IS NAMED C AND WHICH IS COMPRISED OF T POINTER-TO-CHAR TYPE VALUES.

--------------------------------

// Declare one pointer-to-pointer-to-char type variable.
char ** C;

// Allocate T contiguous pointer-to-char-sized chunks of memory and store the memory address of the first pointer-to-char-sized chunk of memory, C[0], inside the pointer-to-pointer-to-char type variable named C.
C = new char * [T];

// C is a two-dimensional array which depicts a histogram (i.e. bar graph) such the length of the ith row is identical to the value stored in B[i].
for (i = 0; i < T; i += 1)
{
    C[i] = new char [B[i]];
    for (k = 0; k < B[i]; k += 1) C[i][k] = 'X';
}

--------------------------------

C = 0x55be9fc45970. // memory address of C[0]

C[0] = XXXXXX.	// &C[0] =	0x55be9fc45970.	(memory address of the first memory cell comprising the block of 8 contiguous memory cells allocated to C[0]).
C[1] = XXXXXX.	// &C[1] =	0x55be9fc45978.	(memory address of the first memory cell comprising the block of 8 contiguous memory cells allocated to C[1]).
C[2] = XXX.	// &C[2] =	0x55be9fc45980.	(memory address of the first memory cell comprising the block of 8 contiguous memory cells allocated to C[2]).
C[3] = XXXXXX.	// &C[3] =	0x55be9fc45988.	(memory address of the first memory cell comprising the block of 8 contiguous memory cells allocated to C[3]).
C[4] = X.	// &C[4] =	0x55be9fc45990.	(memory address of the first memory cell comprising the block of 8 contiguous memory cells allocated to C[4]).
C[5] = XXXXX.	// &C[5] =	0x55be9fc45998.	(memory address of the first memory cell comprising the block of 8 contiguous memory cells allocated to C[5]).
C[6] = XXX.	// &C[6] =	0x55be9fc459a0.	(memory address of the first memory cell comprising the block of 8 contiguous memory cells allocated to C[6]).

--------------------------------

STEP_6: RELEASE MEMORY WHICH WAS ALLOCATED TO THE DYNAMIC ARRAYS NAMED A, B, AND C.

--------------------------------

// De-allocate memory which was assigned to the dynamically-allocated array of S int type values.
delete [] A; // Free up S contiguous int-sized chunks of memory which were assigned to the dynamic array named A.

De-allocate memory which was assigned to the dynamically-allocated array of T int type values.
delete [] B; // Free up T contiguous int-sized chunks of memory which were assigned to the dynamic array named B.

// De-allocate memory which was assigned to the dynamically-allocated array of T pointer-to-char type values.
for (i = 0; i < T; i += 1) delete [] C[i]; // Free up B[i] char-sized chunks of memory which were assigned to the dynamic array named C[i].
delete [] C; // Free up T contiguous pointer-to-char-sized chunks of memory which were assigned to the dynamic array named C.

--------------------------------
End Of Program
--------------------------------