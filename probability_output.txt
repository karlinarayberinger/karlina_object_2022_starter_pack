--------------------------------
Start Of Program
--------------------------------

The following statements describe the data capacities of various primitive C++ data types:

sizeof(int) = 4 byte(s). // integer (i.e. whole number) values

sizeof(unsigned long long int) = 8 byte(s). // integer values from a larger set that what int encompasses

sizeof(bool) = 1 byte(s). // Boolean values (true : not(0) :: false : 0)

sizeof(char) = 1 byte(s). // string character value such as 'A' or '?' or '7'

sizeof(float) = 4 byte(s). // floating-point number value such as 3.14

sizeof(double) = 8 byte(s). // floating-point number values from a larger set than what float encompasses

sizeof(long double) = 16 byte(s). // floating-point number values from a larger set than what double encompasses

sizeof(int *) = 8 byte(s). // A pointer-to-int type variable stores the memory address of the first memory cell of 4 contiguous memory cells which are allocated to an int type variable (and each memory cell has a data capacity of 1 byte).

sizeof(unsigned long long int *) = 8 byte(s). // A pointer-to-unsigned-long-long-int type variable stores the memory address of the first memory cell of 8 contiguous memory cells which are allocated to an unsigned long long int type variable (and each memory cell has a data capacity of 1 byte)..

sizeof(bool *) = 8 byte(s). // A pointer-to-bool type variable stores the memory address of a bool type variable.

sizeof(char *) = 8 byte(s). // A pointer-to-char type variable stores the memory address of a char type variable.

sizeof(float *) = 8 byte(s). // A pointer-to-float type variable stores the memory address of the first memory cell of 4 contiguous memory cells which are allocated to a float type variable (and each memory cell has a data capacity of 1 byte).

sizeof(double *) = 8 byte(s). // A pointer-to-double type variable stores the memory address of the first memory cell of 8 contiguous memory cells which are allocated to a double type variable (and each memory cell has a data capacity of 1 byte).

sizeof(long double *) = 8 byte(s). // A pointer-to-long-double type variable stores the memory address of the first memory cell of 16 contiguous memory cells which are allocated to a long double type variable (and each memory cell has a data capacity of 1 byte).

sizeof(int **) = 8 byte(s). // A pointer-to-pointer-to-int type variable stores the memory address of the first memory cell of 8 contiguous memory cells which are allocated to a pointer-to-int type variable (and each memory cell has a data capacity of 1 byte).

sizeof(bool **) = 8 byte(s). // A pointer-to-pointer-to-bool type variable stores the memory address of the first memory cell of 8 contiguous memory cells which are allocated to a pointer-to-bool type variable (and each memory cell has a data capacity of 1 byte).

sizeof(double **) = 8 byte(s). // A pointer-to-pointer-to-double type variable stores the memory address of the first memory cell of 8 contiguous memory cells which are allocated to a pointer-to-double type variable (and each memory cell has a data capacity of 1 byte).

sizeof(int ***) = 8 byte(s). // A pointer-to-pointer-to-pointer-to-int type variable stores the memory address of the first memory cell of 8 contiguous memory cells which are allocated to a pointer-to-pointer-to-int type variable (and each memory cell has a data capacity of 1 byte).

sizeof(bool ***) = 8 byte(s). // A pointer-to-pointer-to-pointer-to-bool type variable stores the memory address of the first memory cell of 8 contiguous memory cells which are allocated to a pointer-to-pointer-to-bool type variable (and each memory cell has a data capacity of 1 byte).

sizeof(double ***) = 8 byte(s). // A pointer-to-pointer-to-pointer-to-double type variable stores the memory address of the first memory cell of 8 contiguous memory cells which are allocated to a pointer-to-pointer-to-double type variable (and each memory cell has a data capacity of 1 byte).

--------------------------------

STEP_0: CREATE A DYNAMIC ARRAY WHICH IS NAMED A AND WHICH IS COMRPISED OF S INT TYPE VALUES.

--------------------------------

The value which was entered for S is 20.

S := 20. // number of consecutive int-sized chunks of memory to allocate to an array such that the memory address of the first element of that array, A[0], is stored in a pointer-to-int type variable named A

--------------------------------

// Declare a pointer-to-int type variable named A.
int * A;

// Allocate S contiguous int-sized chunks of memory and store the memory address of the first int-sized chunk of memory, A[0]. inside the pointer-to-int variable named A.
A = new int [S];

--------------------------------

A = 0x55fae3e728c0. // memory address of A[0]

A[0] = 0. 	// &A[0] = 	0x55fae3e728c0. 	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[0].
A[1] = 0. 	// &A[1] = 	0x55fae3e728c4. 	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[1].
A[2] = 0. 	// &A[2] = 	0x55fae3e728c8. 	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[2].
A[3] = 0. 	// &A[3] = 	0x55fae3e728cc. 	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[3].
A[4] = 0. 	// &A[4] = 	0x55fae3e728d0. 	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[4].
A[5] = 0. 	// &A[5] = 	0x55fae3e728d4. 	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[5].
A[6] = 0. 	// &A[6] = 	0x55fae3e728d8. 	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[6].
A[7] = 0. 	// &A[7] = 	0x55fae3e728dc. 	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[7].
A[8] = 0. 	// &A[8] = 	0x55fae3e728e0. 	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[8].
A[9] = 0. 	// &A[9] = 	0x55fae3e728e4. 	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[9].
A[10] = 0. 	// &A[10] = 	0x55fae3e728e8. 	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[10].
A[11] = 0. 	// &A[11] = 	0x55fae3e728ec. 	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[11].
A[12] = 0. 	// &A[12] = 	0x55fae3e728f0. 	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[12].
A[13] = 0. 	// &A[13] = 	0x55fae3e728f4. 	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[13].
A[14] = 0. 	// &A[14] = 	0x55fae3e728f8. 	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[14].
A[15] = 0. 	// &A[15] = 	0x55fae3e728fc. 	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[15].
A[16] = 0. 	// &A[16] = 	0x55fae3e72900. 	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[16].
A[17] = 0. 	// &A[17] = 	0x55fae3e72904. 	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[17].
A[18] = 0. 	// &A[18] = 	0x55fae3e72908. 	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[18].
A[19] = 0. 	// &A[19] = 	0x55fae3e7290c. 	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[19].

--------------------------------

STEP_1: CREATE A DYNAMIC ARRAY WHICH IS NAMED A AND WHICH IS COMRPISED OF S INT TYPE VALUES.

--------------------------------

The value which was entered for T is 7.

T := 7. // number of unique states which each element of the array pointed to by A can store exactly one of at a time

--------------------------------

// Seed the pseudo random number generator with the integer number of seconds which have elapsed since the Unix Epoch (i.e. midnight of 01_JANUARY_1970).
srand(time(NULL));

// For each element, A[i], of the array named A, set A[i] to a randomly generated integer which is no smaller than 0 and no larger than (T - 1).
for (i = 0; i < S; i += 1) A[i] = rand() % T;

--------------------------------

A = 0x55fae3e728c0. // memory address of A[0]

A[0] = 1. 	// &A[0] = 	0x55fae3e728c0. 	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[0].
A[1] = 6. 	// &A[1] = 	0x55fae3e728c4. 	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[1].
A[2] = 0. 	// &A[2] = 	0x55fae3e728c8. 	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[2].
A[3] = 3. 	// &A[3] = 	0x55fae3e728cc. 	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[3].
A[4] = 4. 	// &A[4] = 	0x55fae3e728d0. 	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[4].
A[5] = 4. 	// &A[5] = 	0x55fae3e728d4. 	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[5].
A[6] = 2. 	// &A[6] = 	0x55fae3e728d8. 	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[6].
A[7] = 4. 	// &A[7] = 	0x55fae3e728dc. 	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[7].
A[8] = 4. 	// &A[8] = 	0x55fae3e728e0. 	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[8].
A[9] = 6. 	// &A[9] = 	0x55fae3e728e4. 	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[9].
A[10] = 0. 	// &A[10] = 	0x55fae3e728e8. 	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[10].
A[11] = 0. 	// &A[11] = 	0x55fae3e728ec. 	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[11].
A[12] = 0. 	// &A[12] = 	0x55fae3e728f0. 	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[12].
A[13] = 2. 	// &A[13] = 	0x55fae3e728f4. 	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[13].
A[14] = 6. 	// &A[14] = 	0x55fae3e728f8. 	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[14].
A[15] = 1. 	// &A[15] = 	0x55fae3e728fc. 	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[15].
A[16] = 2. 	// &A[16] = 	0x55fae3e72900. 	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[16].
A[17] = 1. 	// &A[17] = 	0x55fae3e72904. 	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[17].
A[18] = 0. 	// &A[18] = 	0x55fae3e72908. 	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[18].
A[19] = 6. 	// &A[19] = 	0x55fae3e7290c. 	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[19].

--------------------------------

STEP_2: SORT THE ELEMENT VALUES OF THE ARRAY NAMED A TO BE IN ASCENDING ORDER.

--------------------------------

// Sort the integer values stored in array A to be in ascending order using the Bubble Sort algorithm.
bubble_sort(A, S);

--------------------------------

A = 0x55fae3e728c0. // memory address of A[0]

A[0] = 0. 	// &A[0] = 	0x55fae3e728c0. 	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[0].
A[1] = 0. 	// &A[1] = 	0x55fae3e728c4. 	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[1].
A[2] = 0. 	// &A[2] = 	0x55fae3e728c8. 	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[2].
A[3] = 0. 	// &A[3] = 	0x55fae3e728cc. 	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[3].
A[4] = 0. 	// &A[4] = 	0x55fae3e728d0. 	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[4].
A[5] = 1. 	// &A[5] = 	0x55fae3e728d4. 	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[5].
A[6] = 1. 	// &A[6] = 	0x55fae3e728d8. 	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[6].
A[7] = 1. 	// &A[7] = 	0x55fae3e728dc. 	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[7].
A[8] = 2. 	// &A[8] = 	0x55fae3e728e0. 	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[8].
A[9] = 2. 	// &A[9] = 	0x55fae3e728e4. 	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[9].
A[10] = 2. 	// &A[10] = 	0x55fae3e728e8. 	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[10].
A[11] = 3. 	// &A[11] = 	0x55fae3e728ec. 	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[11].
A[12] = 4. 	// &A[12] = 	0x55fae3e728f0. 	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[12].
A[13] = 4. 	// &A[13] = 	0x55fae3e728f4. 	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[13].
A[14] = 4. 	// &A[14] = 	0x55fae3e728f8. 	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[14].
A[15] = 4. 	// &A[15] = 	0x55fae3e728fc. 	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[15].
A[16] = 6. 	// &A[16] = 	0x55fae3e72900. 	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[16].
A[17] = 6. 	// &A[17] = 	0x55fae3e72904. 	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[17].
A[18] = 6. 	// &A[18] = 	0x55fae3e72908. 	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[18].
A[19] = 6. 	// &A[19] = 	0x55fae3e7290c. 	(memory address of the first memory cell comprising the block of 4 contiguous memory cells allocated to A[19].

--------------------------------

STEP_3: CREATE A DYNAMIC ARRAY WHICH IS NAMED B AND WHICH IS COMRPISED OF T INT TYPE VALUES.

--------------------------------

// Declare a pointer-to-int type variable named B.
int * B;

// Allocate T contiguous int-sized chunks of memory and store the memory address of the first int-sized chunk of memory, B[0]. inside the pointer-to-int variable named B.
B = new int [T];

--------------------------------

// Deallocate the memory which was used to instantiate the dynamic array represented by A (and a dynamic array (unlike a normal array) is assigned memory during program runtime rather than during program compile time).
delete [] A; // Free up S contiguous int-sized chunks of memory which were assigned to the dynamic array named A.

// Deallocate the memory which was used to instantiate the dynamic array represented by B (and a dynamic array (unlike a normal array) is assigned memory during program runtime rather than during program compile time).
delete [] B; // Free up T contiguous int-sized chunks of memory which were assigned to the dynamic array named B.

--------------------------------
End Of Program
--------------------------------